/*
 * This file was automatically generated by EvoSuite
 * Thu Mar 23 06:59:48 GMT 2023
 */


import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PrimeFlawed_ESTest extends PrimeFlawed_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      PrimeFlawed primeFlawed0 = new PrimeFlawed();
      Integer integer0 = new Integer(347);
      Integer.toUnsignedString(347);
      Integer.toUnsignedString(347);
      Integer.min(1, 1);
      Integer.divideUnsigned((-3668), 347);
      primeFlawed0.isPrime(integer0);
      primeFlawed0.isPrime(integer0);
      primeFlawed0.isPrime(integer0);
      Integer integer1 = new Integer(12377416);
      Integer.getInteger("347", 12377416);
      Integer.getInteger("347");
      // Undeclared exception!
      primeFlawed0.isPrime(integer1);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      PrimeFlawed primeFlawed0 = new PrimeFlawed();
      Integer integer0 = new Integer(32);
      Integer.toUnsignedLong(1);
      int int0 = 315;
      Integer.remainderUnsigned(32, 315);
      Integer.min((-1), 32);
      Integer.getInteger((String) null);
      Integer.compareUnsigned(315, 315);
      Integer.toUnsignedString(32);
      primeFlawed0.isPrime(integer0);
      int int1 = 101;
      Integer integer1 = new Integer(101);
      Integer.remainderUnsigned(315, 1006);
      Integer.getInteger("32");
      primeFlawed0.isPrime(integer1);
      primeFlawed0.isPrime(integer1);
      Integer integer2 = new Integer(315);
      primeFlawed0.isPrime(integer2);
      // Undeclared exception!
      try { 
        primeFlawed0.isPrime((Integer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("PrimeFlawed", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      PrimeFlawed primeFlawed0 = new PrimeFlawed();
      Integer integer0 = new Integer(2);
      primeFlawed0.isPrime(integer0);
      Integer integer1 = new Integer((-2103));
      // Undeclared exception!
      try { 
        primeFlawed0.isPrime(integer1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Negative numbers not allowed
         //
         verifyException("PrimeFlawed", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      PrimeFlawed primeFlawed0 = new PrimeFlawed();
      Integer integer0 = new Integer((-793));
      // Undeclared exception!
      try { 
        primeFlawed0.isPrime(integer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Negative numbers not allowed
         //
         verifyException("PrimeFlawed", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      PrimeFlawed primeFlawed0 = new PrimeFlawed();
      Integer integer0 = new Integer((-3092));
      // Undeclared exception!
      try { 
        primeFlawed0.isPrime(integer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Negative numbers not allowed
         //
         verifyException("PrimeFlawed", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Integer integer0 = new Integer(1);
      Integer integer1 = new Integer(8);
      PrimeFlawed primeFlawed0 = new PrimeFlawed();
      Boolean boolean0 = primeFlawed0.isPrime(integer1);
      assertTrue(boolean0);
      
      primeFlawed0.isPrime(integer0);
      Integer integer2 = new Integer(96);
      Boolean boolean1 = primeFlawed0.isPrime(integer2);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      PrimeFlawed primeFlawed0 = new PrimeFlawed();
      Integer integer0 = new Integer(2);
      Boolean boolean0 = primeFlawed0.isPrime(integer0);
      assertTrue(boolean0);
      
      Integer integer1 = new Integer(0);
      Boolean boolean1 = primeFlawed0.isPrime(integer1);
      assertFalse(boolean1);
      
      Integer integer2 = new Integer(59);
      Boolean boolean2 = primeFlawed0.isPrime(integer2);
      assertFalse(boolean2);
  }
}
